---
- name: OCP4-deploy | Task03 | Create docker credential path
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "{{ lookup('ENV', 'HOME'  }}/.docker"
- name: OCP-deploy | Task03 | Extract tarballs
  command:
    "tar xvzf /{{ domainCluster }}.tar.gz -C {{ lookup('ENV', 'HOME') }}"
  creates:
    - "/home/core/{{ 




- name: extract artifact tar archive to root home directory
  shell: "tar xvzf /home/core/{{ cluster_domain }}.tar.gz -C {{ remote_home }}"

- name: copy docker config to home directory
  shell: "cp ~/{{ cluster_domain }}/.docker/config.json ~/.docker"

- name: extract images tar archive to root home directory
  shell: "tar xvf /home/core/images.tar -C {{ remote_home }}"

- name: load nginx image into local cache
  shell: "podman load -i ~/images/docker-nginxlatest-image.tar"

- name: load docker registry image into local cache
  shell: "podman load -i ~/images/docker-registry2-image.tar"

- name: prepare web root for nginx server
  shell: "chmod -R 755 ~/{{ cluster_domain }}/data"

- name: check for nginx service
  shell: podman container ls
  register: nginxCheck

- name: start nginx server
  shell: |
    podman run                                                   \
    --name=nginx                                                 \
    --rm                                                         \
    --detach                                                     \
    --net=host                                                   \
    --privileged                                                 \
    --volume ~/{{ cluster_domain }}/data:/usr/share/nginx/html:z \
    docker.io/library/nginx:latest
  when: '"nginx" not in nginxCheck.stdout'
- name: write auth credentials for registry service
  shell: |
    podman run                                     \
    --rm                                           \
    --entrypoint htpasswd                          \
    registry:2                                     \
    -Bbn {{ vpc_name }} {{ vpc_name }} > ~/{{ cluster_domain }}/auth/htpasswd
- name: check for registry service
  shell: podman container ls
  register: registryCheck
- name: start registry service
  shell: |
    podman run                                                              \
    --name registry                                                         \
    --detach                                                                \
    --net=host                                                              \
    --privileged                                                            \
    --restart=always                                                        \
    --publish 443:443                                                       \
    --publish 5000:5000                                                     \
    --env REGISTRY_HTTP_ADDR=0.0.0.0:443                                    \
    --env "REGISTRY_AUTH=htpasswd"                                          \
    --env REGISTRY_AUTH_HTPASSWD_PATH=/root/auth/htpasswd                   \
    --volume ~/{{ cluster_domain }}/auth/htpasswd:/root/auth/htpasswd:z     \
    --env REGISTRY_HTTP_TLS_KEY=/root/ssl/{{ cluster_domain }}.key          \
    --env REGISTRY_HTTP_TLS_CERTIFICATE=/root/ssl/{{ cluster_domain }}.crt  \
    --volume ~/{{ cluster_domain }}/ssl:/root/ssl                           \
    --env "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm"                     \
    --volume ~/{{ cluster_domain }}/registry:/var/lib/registry:z            \
    docker.io/library/registry:2
  when: '"registry" not in nginxCheck.stdout'
- name: update the certificate trust on the server
  shell: "cp /root/{{ cluster_domain }}/ssl/{{ cluster_domain }}.crt /etc/pki/ca-trust/source/anchors/${CLUSTER_DOMAIN}.crt && update-ca-trust"
- name: extract the ocp4 images from the mirror tar
  shell: "tar xvf /home/core/mirror.tar -C ~/{{ cluster_domain }}"
- name: load ocp4 images into mirrored registry
  shell: |
    oc image mirror                                     \
    -a ~/.docker/config.json                            \
    --dir=/root/{{ cluster_domain }}/mirror             \
    file://openshift/release:{{ ocp_version }}*         \
    registry.{{ cluster_domain }}/ocp-{{ ocp_version }}
